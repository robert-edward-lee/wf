#!/usr/bin/env python
from ctypes import *

from scipy.signal import windows


class Test(object):
    EPSILON = 1e-14
    dll = CDLL('./libwf.dll')

    def __init__(self, dll_wf_name: str, scipy_wf_name: str, has_alpha=False, alpha=0.0):
        self._dll_wf_name = dll_wf_name
        self._scipy_wf_name = scipy_wf_name
        self._has_alpha = has_alpha
        self._alpha = alpha

    def test(self, win_size: int) -> None:
        print(f'test for "{self._dll_wf_name}({
              self._alpha if self._has_alpha else ''})" ... ', end='')
        test_arr = (c_double * win_size)()
        # функции для получения массивов
        wf = getattr(self.dll, self._dll_wf_name)
        scipy_wf = getattr(windows, self._scipy_wf_name)
        # создание массивов
        if not self._has_alpha:
            wf(test_arr, c_size_t(win_size))
            test_win = scipy_wf(win_size)
        else:
            wf(test_arr, c_size_t(win_size), c_double(self._alpha))
            test_win = scipy_wf(win_size, self._alpha)
        # сравнение массивов
        mismatches = 0
        for i in range(win_size):
            xn = float(test_arr[i])
            ref = float(test_win[i])

            if abs(xn - ref) > self.EPSILON:
                # print(f'[{i:03}]: {xn} != {ref}')
                mismatches += 1

        print(f'{'passed' if not mismatches else f'failed, {mismatches} mismatches'}')

        return mismatches


if __name__ == '__main__':
    TESTS = [
        Test('wf_rect', 'boxcar'),
        Test('wf_triang', 'triang'),
        Test('wf_bartlett', 'bartlett'),
        Test('wf_parzen', 'parzen'),

        Test('wf_cosine', 'cosine'),
        Test('wf_hann', 'hann'),
        Test('wf_hamming', 'hamming'),
        Test('wf_general_hamming', 'general_hamming', True, 0.3),
        Test('wf_general_hamming', 'general_hamming', True, 0.5),
        Test('wf_general_hamming', 'general_hamming', True, 0.8),
        Test('wf_blackman', 'blackman'),
        Test('wf_nuttall', 'nuttall'),
        Test('wf_blackmanharris', 'blackmanharris'),
        Test('wf_flattop', 'flattop'),
        Test('wf_barthann', 'barthann'),

        Test('wf_gaussian', 'gaussian', True, 0.3),
        Test('wf_gaussian', 'gaussian', True, 0.5),
        Test('wf_gaussian', 'gaussian', True, 0.8),
        Test('wf_tukey', 'tukey', True, 0.3),
        Test('wf_tukey', 'tukey', True, 0.5),
        Test('wf_tukey', 'tukey', True, 0.8),
    ]

    SIZES = [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        16,
        31,
        32,
        33,
        64,
        128,
        256,
        511,
        512,
        513,
        1024,
        2048,
        4096,
        8192,
    ]

    tests = len(TESTS) * len(SIZES)
    errs = 0
    for s in SIZES:
        print('*************************')
        print(f'test for win size: {s}')
        print('*************************')
        for t in TESTS:
            err = t.test(s)
            if err != 0:
                errs += 1

    if errs == 0:
        print('All tests are passed!')
    else:
        print(f'{tests - errs} tests are passed!, {errs} errors found!')
